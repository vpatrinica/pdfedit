@page "/"
@rendermode InteractiveServer
@using PdfEdit.Shared.Models
@using PdfEdit.Client.Services
@using Microsoft.JSInterop
@using System.Linq
@using System.Text.Json
@inject IPdfApiService PdfApiService
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger

<PageTitle>PDF Editor</PageTitle>

<div class="container-fluid">
    @if (_uploadResponse == null)
    {
        <!-- Upload view unchanged -->
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card"><div class="card-body">
                    <h5 class="card-title">Upload PDF Document</h5>
                    <div class="mb-3"><InputFile OnChange="OnFileSelected" class="form-control" accept=".pdf" /></div>
                    <div class="mb-3">
                        <label class="form-label small mb-1">Paper Size</label>
                        <select class="form-select form-select-sm" @bind="_selectedPaperName" @bind:after="ApplySelectedPaperSize">
                            @foreach(var ps in _paperSizes){ <option value="@ps.Name">@ps.Name (@ps.Width x @ps.Height)</option> }
                        </select>
                        <div class="form-text">Coordinates will use selected page size (points)</div>
                    </div>
                    @if (_isUploading) { <div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm me-2" role="status"></div><span>Loading PDF locally...</span></div> }
                    @if (!string.IsNullOrEmpty(_uploadStatus)) { <div class="small text-muted">@_uploadStatus</div> }
                    @if (!string.IsNullOrEmpty(_errorMessage)) { <div class="alert alert-danger" role="alert">@_errorMessage</div> }
                    @if (_restoredSession) { <div class="alert alert-info small mt-3">Previous session restored. Click Edit PDF to continue.</div> }
                </div></div>
            </div>
        </div>
    }
    else if (!_pdfLoaded)
    {
        <!-- Initial metadata view unchanged -->
        <div class="row">
            <div class="col-lg-8">
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">@_uploadResponse?.FileName</h5>
                        <div>
                            <button class="btn btn-primary" @onclick="BeginEdit"><i class="bi bi-pencil-square"></i> Edit PDF</button>
                            <button class="btn btn-outline-secondary ms-2" @onclick="Reset">Upload Another</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-2 mb-2">
                            <div class="col-sm-6"><strong>Pages:</strong> @_uploadResponse?.PageCount</div>
                            <div class="col-sm-6"><strong>Form Fields:</strong> @_uploadResponse?.FormFields.Count</div>
                        </div>
                        <div class="row g-2 mb-3">
                            <div class="col-sm-6">
                                <label class="form-label small mb-1">Paper Size</label>
                                <select class="form-select form-select-sm" @bind="_selectedPaperName" @bind:after="ApplySelectedPaperSize">
                                    @foreach(var ps in _paperSizes){ <option value="@ps.Name">@ps.Name (@ps.Width x @ps.Height)</option> }
                                </select>
                            </div>
                            <div class="col-sm-6 small d-flex align-items-end">Current: @_pageWidthPoints x @_pageHeightPoints</div>
                        </div>
                        <button class="btn btn-success" @onclick="BeginEdit"><i class="bi bi-magic"></i> Start Editing</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card mb-3"><div class="card-header d-flex justify-content-between align-items-center"><span class="fw-semibold">Document Details</span><span class="badge bg-info text-dark">Ready (Local)</span></div><div class="card-body small" style="max-height:300px; overflow:auto;">
                    <dl class="row mb-0">
                        <dt class="col-sm-5">Session Id</dt><dd class="col-sm-7 text-break">@_uploadResponse!.Id</dd>
                        <dt class="col-sm-5">File Name</dt><dd class="col-sm-7 text-break">@_uploadResponse!.FileName</dd>
                        <dt class="col-sm-5">Pages</dt><dd class="col-sm-7">@_uploadResponse!.PageCount</dd>
                        <dt class="col-sm-5">Form Fields</dt><dd class="col-sm-7">@_uploadResponse!.FormFields.Count</dd>
                    </dl>
                </div></div>
            </div>
        </div>
    }
    else
    {
        <!-- Editing view WITHOUT side panel; controls inline -->
        <div class="card mb-3">
            <div class="card-header d-flex flex-wrap align-items-center gap-2">
                <h5 class="mb-0 me-3 flex-grow-1">@_uploadResponse?.FileName</h5>
                <div class="btn-group me-2" role="group">
                    <button class="btn btn-sm btn-outline-primary" @onclick="PrevPage" disabled="@(_currentPage<=1)"><i class="bi bi-chevron-left"></i></button>
                    <span class="btn btn-sm btn-light disabled">Pg @_currentPage / @_uploadResponse?.PageCount</span>
                    <button class="btn btn-sm btn-outline-primary" @onclick="NextPage" disabled="@(_uploadResponse==null || _currentPage>=_uploadResponse.PageCount)"><i class="bi bi-chevron-right"></i></button>
                </div>
                <button class="btn btn-sm btn-outline-primary" @onclick="AddTextBox" disabled="@_isProcessing"><i class="bi bi-type"></i> Text</button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="UploadSignature" disabled="@_isProcessing"><i class="bi bi-file-image"></i> Signature</button>
                <button class="btn btn-sm btn-success" @onclick="SaveAndDownload" disabled="@_isProcessing">
                    @if (_isProcessing) { <span class="spinner-border spinner-border-sm me-2" role="status"></span> }
                    <i class="bi bi-download"></i> Save
                </button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="ExitEdit" disabled="@_isProcessing">Back</button>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-lg-9">
                        <div id="pdfPreviewViewer" style="height: 750px; overflow:auto; border: 1px solid #ccc; position:relative;">
                            <canvas id="pdfPreviewCanvas" style="width:100%; display:block;"></canvas>
                            @if (_isPreviewing)
                            {
                                <div class="position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center" style="background:rgba(255,255,255,.6);"><div class="spinner-border" role="status"></div></div>
                            }
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-3">
                            <label class="form-label small mb-1">Paper Size</label>
                            <select class="form-select form-select-sm" @bind="_selectedPaperName" @bind:after="ApplySelectedPaperSize">
                                @foreach(var ps in _paperSizes){ <option value="@ps.Name">@ps.Name (@ps.Width x @ps.Height)</option> }
                            </select>
                            <div class="small text-muted">@_pageWidthPoints x @_pageHeightPoints</div>
                        </div>
                        <div class="mb-3">
                            <h6 class="d-flex justify-content-between align-items-center mb-2">Form Fields (Pg @_currentPage)
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">Filter</button>
                                    <ul class="dropdown-menu dropdown-menu-end small">
                                        <li><a class="dropdown-item @( _fieldFilter==FieldFilter.All?"active":"")" href="#" @onclick="(()=>SetFieldFilter(FieldFilter.All))">All</a></li>
                                        <li><a class="dropdown-item @( _fieldFilter==FieldFilter.TextOnly?"active":"")" href="#" @onclick="(()=>SetFieldFilter(FieldFilter.TextOnly))">Text</a></li>
                                        <li><a class="dropdown-item @( _fieldFilter==FieldFilter.Checkboxes?"active":"")" href="#" @onclick="(()=>SetFieldFilter(FieldFilter.Checkboxes))">Checkboxes</a></li>
                                        <li><a class="dropdown-item @( _fieldFilter==FieldFilter.Radio?"active":"")" href="#" @onclick="(()=>SetFieldFilter(FieldFilter.Radio))">Radio</a></li>
                                    </ul>
                                </div>
                            </h6>
                            <div style="max-height:250px; overflow:auto;">
                                @if (_uploadResponse?.FormFields.Any(f=>f.PageNumber==_currentPage) == true)
                                {
                                    @foreach (var f in FilteredFields())
                                    {
                                        var centerX = f.Bounds.X + f.Bounds.Width/2.0; var centerY = f.Bounds.Y + f.Bounds.Height/2.0;
                                        <div class="mb-2 field-item @(f.Name==_activeFieldName?"selected":"")" @onclick="() => SelectFormField(f)">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <label class="form-label small mb-1">@f.Name (@f.Type)</label>
                                                <button class="btn btn-sm btn-outline-secondary" title="Target" @onclick:stopPropagation @onclick="(()=>ShowTarget(f))">Target</button>
                                            </div>
                                            @if (f.Type == PdfFieldType.Text)
                                            { <input class="form-control form-control-sm" @bind="f.Value" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /> }
                                            else if (f.Type == PdfFieldType.Checkbox)
                                            { <div class="form-check form-switch"><input type="checkbox" class="form-check-input" checked="@GetCheckboxValue(f)" @onchange="@(e=> { var v = e.Value is bool b ? b : bool.TryParse(e.Value?.ToString(), out var px) && px; SetCheckboxValue(f,v); SaveSession(); QueuePreviewUpdate(); StateHasChanged(); })" /></div> }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                        <div class="mb-3">
                            <h6 class="d-flex justify-content-between align-items-center mb-2">Text Elements (Pg @_currentPage) <button class="btn btn-sm btn-outline-primary" @onclick="AddTextBox">Add</button></h6>
                            <div style="max-height:250px; overflow:auto;">
                                @foreach (var textElement in _textElements.Where(t=>t.PageNumber==_currentPage))
                                {
                                    var selected = textElement.Id == _activeTextId;
                                    <div class="mb-2 p-2 border rounded small @(selected?"panel-selected":"")" @onclick="(()=>SelectTextElement(textElement))">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <span class="text-muted">TXT @textElement.Id.Substring(0,6)</span>
                                            <div>
                                                <button class="btn btn-sm btn-outline-secondary me-1" title="Target" @onclick:stopPropagation @onclick="(()=>ShowTarget(textElement))">Target</button>
                                                <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick:stopPropagation @onclick="(()=> RemoveTextElement(textElement.Id))"><i class="bi bi-trash"></i></button>
                                            </div>
                                        </div>
                                        <input class="form-control form-control-sm mb-1" @bind="textElement.Text" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" />
                                        <div class="row g-1 mb-1">
                                            <div class="col-4"><input class="form-control form-control-sm" type="number" min="6" max="96" @bind="textElement.FontSize" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /></div>
                                            <div class="col-4"><input class="form-control form-control-sm" type="number" min="5" @bind="textElement.Bounds.Width" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /></div>
                                            <div class="col-4"><input class="form-control form-control-sm" type="number" min="5" @bind="textElement.Bounds.Height" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /></div>
                                        </div>
                                        <div class="row g-1 mb-1">
                                            <div class="col-6"><input placeholder="X" class="form-control form-control-sm" type="number" min="0" max="@_pageWidthPoints" @bind="textElement.Bounds.X" @bind:after="(()=>{UpdateTextPosition(textElement,nameof(textElement.Bounds.X),textElement.Bounds.X); QueuePreviewUpdate();})" /></div>
                                            <div class="col-6"><input placeholder="Y" class="form-control form-control-sm" type="number" min="0" max="@_pageHeightPoints" @bind="textElement.Bounds.Y" @bind:after="(()=>{UpdateTextPosition(textElement,nameof(textElement.Bounds.Y),textElement.Bounds.Y); QueuePreviewUpdate();})" /></div>
                                        </div>
                                        <input type="color" class="form-control form-control-color form-control-sm" style="padding:0;" @bind="textElement.Color" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" />
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="mb-3">
                            <h6 class="d-flex justify-content-between align-items-center mb-2">Signatures (Pg @_currentPage) <button class="btn btn-sm btn-outline-secondary" @onclick="UploadSignature">Add</button></h6>
                            <div style="max-height:250px; overflow:auto;">
                                @foreach (var imageElement in _imageElements.Where(i=>i.PageNumber==_currentPage))
                                {
                                    var selected = imageElement.Id == _activeImageId;
                                    <div class="mb-2 p-2 border rounded small @(selected?"panel-selected":"")" @onclick="(()=>SelectImageElement(imageElement))">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <span class="text-muted">SIG @imageElement.Id.Substring(0,6)</span>
                                            <div>
                                                <button class="btn btn-sm btn-outline-secondary me-1" title="Target" @onclick:stopPropagation @onclick="(()=>ShowTarget(imageElement))">Target</button>
                                                <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick:stopPropagation @onclick="(()=> RemoveImageElement(imageElement.Id))"><i class="bi bi-trash"></i></button>
                                            </div>
                                        </div>
                                        <div class="row g-1 mb-1">
                                            <div class="col-6"><label class="form-label small">X</label><input type="number" class="form-control form-control-sm" min="0" max="@_pageWidthPoints" @bind="imageElement.Bounds.X" @bind:after="(()=>{UpdateImagePosition(imageElement,nameof(imageElement.Bounds.X),imageElement.Bounds.X); QueuePreviewUpdate();})" /></div>
                                            <div class="col-6"><label class="form-label small">Y</label><input type="number" class="form-control form-control-sm" min="0" max="@_pageHeightPoints" @bind="imageElement.Bounds.Y" @bind:after="(()=>{UpdateImagePosition(imageElement,nameof(imageElement.Bounds.Y),imageElement.Bounds.Y); QueuePreviewUpdate();})" /></div>
                                        </div>
                                        <div class="mb-1">
                                            <label class="form-label small">Height (pts)</label>
                                            <input class="form-control form-control-sm" type="number" min="5" value="@Math.Round(imageElement.Bounds.Height)" @onchange="(e=>{OnImageHeightChanged(imageElement,e); QueuePreviewUpdate();})" />
                                            <div class="small text-muted">W:@Math.Round(imageElement.Bounds.Width) H:@Math.Round(imageElement.Bounds.Height)</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(_errorMessage)) { <div class="alert alert-danger mt-3 mb-0">@_errorMessage</div> }
            </div>
        </div>
    }
</div>

<InputFile @ref="_signatureFileInput" id="signatureFileInput" OnChange="OnSignatureSelected" class="d-none" accept=".png,.jpg,.jpeg" />

@code {
    private record PaperSize(string Name,double Width,double Height);
    private List<PaperSize> _paperSizes = new(){ new("A4",595,842), new("Letter",612,792), new("Legal",612,1008)};
    private string _selectedPaperName = "A4";
    private double _pageWidthPoints = 595;
    private double _pageHeightPoints = 842;

    private PdfUploadResponse? _uploadResponse;
    private bool _pdfLoaded = false;
    private bool _isUploading = false;
    private bool _isProcessing = false;
    private bool _isPreviewing = false;
    private string _errorMessage = string.Empty;
    private string _uploadStatus = string.Empty;
    private string? _originalPdfBase64;
    private bool _restoredSession = false;
    private bool _restoreAttempted = false;
    private InputFile? _signatureFileInput;

    private List<RichTextElement> _textElements = new();
    private List<SignatureImageElement> _imageElements = new();
    private int _currentPage = 1;
    private string? _activeFieldName; private string? _activeTextId; private string? _activeImageId;
    private CancellationTokenSource? _previewCts;

    private enum FieldFilter { All, TextOnly, Checkboxes, Radio }
    private FieldFilter _fieldFilter = FieldFilter.All;

    public class RichTextElement : PdfTextElement { }
    public class SignatureImageElement : PdfImageElement { public double BaseWidth { get; set; } public double BaseHeight { get; set; } public double ScaleFactor { get; set; } = 1.0; }

    private void ApplySelectedPaperSize()
    {
        var ps = _paperSizes.FirstOrDefault(p=>p.Name==_selectedPaperName) ?? _paperSizes[0];
        _pageWidthPoints = ps.Width; _pageHeightPoints = ps.Height;
        foreach(var t in _textElements){ t.Bounds.X = Clamp(t.Bounds.X,0,_pageWidthPoints - t.Bounds.Width); t.Bounds.Y = Clamp(t.Bounds.Y,0,_pageHeightPoints - t.Bounds.Height);}        
        foreach(var i in _imageElements){ i.Bounds.X = Clamp(i.Bounds.X,0,_pageWidthPoints - i.Bounds.Width); i.Bounds.Y = Clamp(i.Bounds.Y,0,_pageHeightPoints - i.Bounds.Height);}        
        StateHasChanged();
        QueuePreviewUpdate();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File; if (file == null) return;
        _isUploading = true; _uploadStatus = "Uploading..."; _errorMessage = string.Empty; StateHasChanged();
        try
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream(50 * 1024 * 1024).CopyToAsync(ms);
            _originalPdfBase64 = Convert.ToBase64String(ms.ToArray());
            PdfUploadResponse? serverResp = null; try { serverResp = await PdfApiService.UploadPdfAsync(file); } catch (Exception exMeta) { Logger.LogWarning(exMeta, "Server upload (metadata) failed"); }
            if (serverResp != null) { _uploadResponse = serverResp; _uploadStatus = "Server metadata loaded"; }
            else { _uploadResponse = new PdfUploadResponse { Id = Guid.NewGuid().ToString(), FileName = file.Name, PageCount = 1 }; _uploadStatus = "Loaded locally (no server metadata)"; }
            await JSRuntime.InvokeVoidAsync("savePdfToIndexedDb", _uploadResponse.Id, _originalPdfBase64);
            await JSRuntime.InvokeVoidAsync("setLastSessionId", _uploadResponse.Id);
            SaveSession();
        }
        catch (Exception ex) { _errorMessage = $"Error reading/uploading PDF: {ex.Message}"; Logger.LogError(ex, "OnFileSelected failed"); }
        finally { _isUploading = false; StateHasChanged(); }
    }

    private async Task BeginEdit()
    {
        if (_uploadResponse == null) return;
        if (string.IsNullOrEmpty(_originalPdfBase64)) _originalPdfBase64 = await JSRuntime.InvokeAsync<string?>("getPdfFromIndexedDb", _uploadResponse.Id);
        _pdfLoaded = true; _currentPage = 1; await InvokeAsync(StateHasChanged); QueuePreviewUpdate();
    }

    private void ExitEdit() { _pdfLoaded = false; StateHasChanged(); }

    private void Reset()
    {
        if (_uploadResponse != null) JSRuntime.InvokeVoidAsync("clearMetadata", _uploadResponse.Id);
        _uploadResponse = null; _pdfLoaded = false; _textElements.Clear(); _imageElements.Clear(); _errorMessage = string.Empty; _uploadStatus = string.Empty; _originalPdfBase64 = null; _restoredSession = false; StateHasChanged();
    }

    private void AddTextBox()
    {
        var t = new RichTextElement { Id = Guid.NewGuid().ToString(), Text = "New Text", PageNumber = _currentPage, FontSize = 14, Color = "#000000", Bounds = new Rectangle { X = 50, Y = _pageHeightPoints - 70, Width = 200, Height = 20 } };
        _textElements.Add(t); SaveSession(); QueuePreviewUpdate(); StateHasChanged();
    }

    private async Task UploadSignature() => await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('signatureFileInput').click()");

    private async Task OnSignatureSelected(InputFileChangeEventArgs e)
    {
        var file = e.File; if (file == null) return;
        try
        {
            using var stream = file.OpenReadStream(5 * 1024 * 1024); using var ms = new MemoryStream(); await stream.CopyToAsync(ms);
            var imageData = Convert.ToBase64String(ms.ToArray());
            var img = new SignatureImageElement { Id = Guid.NewGuid().ToString(), ImageData = imageData, PageNumber = _currentPage, Bounds = new Rectangle { X = 50, Y = _pageHeightPoints - 150, Width = 100, Height = 50 }, BaseWidth = 100, BaseHeight = 50 };
            _imageElements.Add(img); SaveSession(); QueuePreviewUpdate(); StateHasChanged();
        }
        catch (Exception ex) { _errorMessage = $"Error uploading signature: {ex.Message}"; Logger.LogError(ex, "Signature upload"); }
    }

    private void OnImageHeightChanged(SignatureImageElement img, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var newHeight))
        {
            var aspect = (img.BaseWidth > 0 && img.BaseHeight > 0) ? img.BaseWidth / img.BaseHeight : (img.Bounds.Width / img.Bounds.Height);
            newHeight = Math.Max(5, newHeight);
            var newWidth = Math.Max(5, newHeight * aspect);
            img.Bounds.Height = newHeight; img.Bounds.Width = newWidth;
            img.Bounds.X = Clamp(img.Bounds.X, 0, _pageWidthPoints - img.Bounds.Width);
            img.Bounds.Y = Clamp(img.Bounds.Y, 0, _pageHeightPoints - img.Bounds.Height);
            SaveSession(); QueuePreviewUpdate(); StateHasChanged();
        }
    }

    private void RemoveTextElement(string id) { _textElements.RemoveAll(t => t.Id == id); SaveSession(); QueuePreviewUpdate(); StateHasChanged(); }
    private void RemoveImageElement(string id) { _imageElements.RemoveAll(i => i.Id == id); SaveSession(); QueuePreviewUpdate(); StateHasChanged(); }

    private async Task SaveAndDownload()
    {
        if (_uploadResponse == null || string.IsNullOrEmpty(_originalPdfBase64)) return;
        _isProcessing = true; _errorMessage = string.Empty; StateHasChanged();
        try
        {
            var request = new PdfEditRequest { OriginalPdfBase64 = _originalPdfBase64, FormFields = _uploadResponse.FormFields, TextElements = _textElements.Cast<PdfTextElement>().ToList(), ImageElements = _imageElements.Cast<PdfImageElement>().ToList() };
            var response = await PdfApiService.ProcessPdfAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var bytes = await response.Content.ReadAsByteArrayAsync();
                await JSRuntime.InvokeVoidAsync("downloadFile", $"edited-document-{DateTime.Now:yyyyMMdd-HHmmss}.pdf", Convert.ToBase64String(bytes));
            }
            else { _errorMessage = $"Process failed: {(int)response.StatusCode} {response.ReasonPhrase}"; }
        }
        catch (Exception ex) { _errorMessage = $"Process error: {ex.Message}"; Logger.LogError(ex, "Process PDF"); }
        finally { _isProcessing = false; StateHasChanged(); }
    }

    private void SaveSession()
    {
        if (_uploadResponse == null) return;
        try
        {
            var wrapper = new { upload = _uploadResponse, texts = _textElements, images = _imageElements };
            JSRuntime.InvokeVoidAsync("saveMetadata", _uploadResponse.Id, JsonSerializer.Serialize(wrapper));
        }
        catch (Exception ex) { Logger.LogWarning(ex, "Failed to save session"); }
    }

    private void QueuePreviewUpdate()
    {
        if (!_pdfLoaded || _uploadResponse == null || string.IsNullOrEmpty(_originalPdfBase64)) return;
        _previewCts?.Cancel();
        var cts = new CancellationTokenSource(); _previewCts = cts;
        _ = Task.Run(async () =>
        {
            try { await Task.Delay(350, cts.Token); await InvokeAsync(UpdatePreviewAsync); } catch (TaskCanceledException) { } catch (Exception ex) { Logger.LogWarning(ex, "Preview queue failed"); }
        });
    }

    private async Task UpdatePreviewAsync()
    {
        if (_uploadResponse == null || string.IsNullOrEmpty(_originalPdfBase64)) return;
        _isPreviewing = true; StateHasChanged();
        try
        {
            var request = new PdfEditRequest { OriginalPdfBase64 = _originalPdfBase64, FormFields = _uploadResponse.FormFields, TextElements = _textElements.Cast<PdfTextElement>().ToList(), ImageElements = _imageElements.Cast<PdfImageElement>().ToList() };
            var response = await PdfApiService.ProcessPdfAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var bytes = await response.Content.ReadAsByteArrayAsync();
                var previewPdfBase64 = Convert.ToBase64String(bytes);
                await JSRuntime.InvokeVoidAsync("renderPdfPage", previewPdfBase64, "pdfPreviewCanvas", _currentPage, 1.0);
            }
            else { _errorMessage = $"Preview failed: {(int)response.StatusCode} {response.ReasonPhrase}"; }
        }
        catch (Exception ex) { _errorMessage = $"Preview error: {ex.Message}"; Logger.LogError(ex, "Preview update"); }
        finally { _isPreviewing = false; StateHasChanged(); }
    }

    private bool GetCheckboxValue(PdfFormField field) => !string.IsNullOrEmpty(field.Value) && field.Value.ToLower() != "false" && field.Value != "0";
    private void SetCheckboxValue(PdfFormField field, bool value) { field.Value = value ? "true" : "false"; }

    private void PrevPage() { if (_currentPage > 1) { _currentPage--; QueuePreviewUpdate(); } }
    private void NextPage() { if (_uploadResponse != null && _currentPage < _uploadResponse.PageCount) { _currentPage++; QueuePreviewUpdate(); } }

    private void SelectFormField(PdfFormField f){ _activeFieldName = f.Name; if (f.PageNumber!=_currentPage){ _currentPage=f.PageNumber; QueuePreviewUpdate(); } StateHasChanged(); }
    private void SelectTextElement(RichTextElement t){ _activeTextId = t.Id; _activeImageId=null; _activeFieldName=null; StateHasChanged(); }
    private void SelectImageElement(SignatureImageElement i){ _activeImageId = i.Id; _activeTextId=null; _activeFieldName=null; StateHasChanged(); }

    private async Task ShowTarget(RichTextElement t)
    {
        var x = t.Bounds.X + t.Bounds.Width/2.0;
        var y = t.Bounds.Y + t.Bounds.Height/2.0;
        await ShowTargetAt(x,y);
    }
    private async Task ShowTarget(SignatureImageElement img)
    {
        var x = img.Bounds.X + img.Bounds.Width/2.0;
        var y = img.Bounds.Y + img.Bounds.Height/2.0;
        await ShowTargetAt(x,y);
    }
    private async Task ShowTarget(PdfFormField f)
    {
        var x = f.Bounds.X + f.Bounds.Width/2.0;
        var y = f.Bounds.Y + f.Bounds.Height/2.0;
        await ShowTargetAt(x,y);
    }
    private async Task ShowTargetAt(double x, double y)
    {
        try { await JSRuntime.InvokeVoidAsync("showPdfTarget", "pdfPreviewCanvas", x, y); } catch { }
    }

    private static double Clamp(double v, double min, double max) => v < min ? min : (v > max ? max : v);
    private void UpdateImagePosition(SignatureImageElement i, string which, object? val){ if (double.TryParse(val?.ToString(), out var num)){ if (which.EndsWith("X")) i.Bounds.X = Clamp(num,0,_pageWidthPoints - Math.Max(5,i.Bounds.Width)); else i.Bounds.Y = Clamp(num,0,_pageHeightPoints - Math.Max(5,i.Bounds.Height)); SaveSession(); QueuePreviewUpdate(); StateHasChanged(); } }
    private void UpdateTextPosition(RichTextElement t, string which, object? val){ if (double.TryParse(val?.ToString(), out var num)){ if (which.EndsWith("X")) t.Bounds.X = Clamp(num,0,_pageWidthPoints - Math.Max(5,t.Bounds.Width)); else t.Bounds.Y = Clamp(num,0,_pageHeightPoints - Math.Max(5,t.Bounds.Height)); SaveSession(); QueuePreviewUpdate(); StateHasChanged(); } }
    private void SetFieldFilter(FieldFilter f){ _fieldFilter = f; StateHasChanged(); }
    private IEnumerable<PdfFormField> FilteredFields()
        => _uploadResponse!.FormFields
            .Where(f=>f.PageNumber==_currentPage)
            .Where(f => _fieldFilter==FieldFilter.All || (_fieldFilter==FieldFilter.TextOnly && f.Type==PdfFieldType.Text) || (_fieldFilter==FieldFilter.Checkboxes && f.Type==PdfFieldType.Checkbox) || (_fieldFilter==FieldFilter.Radio && f.Type==PdfFieldType.RadioButton));
}

<style>
    .panel-selected { border-color:#ff5722 !important; box-shadow:0 0 4px rgba(255,87,34,.6); }
    .field-item.selected { border:1px solid #ff5722; background:rgba(255,87,34,.05); }
</style>
