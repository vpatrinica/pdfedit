@page "/"
@using PdfEdit.Shared.Models
@using PdfEdit.Client.Services
@inject IPdfApiService PdfApiService
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger

<PageTitle>PDF Editor</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>PDF Editor</h1>
            <p>Upload, edit, and download PDF documents with ease.</p>
        </div>
    </div>

    @if (!_pdfLoaded)
    {
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Upload PDF Document</h5>
                        <div class="mb-3">
                            <InputFile OnChange="OnFileSelected" class="form-control" accept=".pdf" />
                        </div>
                        @if (_isUploading)
                        {
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                <span>Uploading and processing PDF...</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @_errorMessage
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">@_uploadResponse?.FileName</h5>
                        <div>
                            <button class="btn btn-primary me-2" @onclick="AddTextBox" disabled="@_isProcessing">
                                <i class="bi bi-type"></i> Add Text
                            </button>
                            <button class="btn btn-secondary me-2" @onclick="UploadSignature" disabled="@_isProcessing">
                                <i class="bi bi-file-image"></i> Add Signature
                            </button>
                            <button class="btn btn-success" @onclick="SaveAndDownload" disabled="@_isProcessing">
                                @if (_isProcessing)
                                {
                                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                }
                                <i class="bi bi-download"></i> Save & Download
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- PDF Viewer will be rendered here -->
                        <div id="pdfViewer" style="height: 600px; border: 1px solid #ccc;">
                            <canvas id="pdfCanvas"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Document Properties</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Pages:</strong> @_uploadResponse?.PageCount</p>
                        <p><strong>Form Fields:</strong> @_uploadResponse?.FormFields.Count</p>
                    </div>
                </div>

                @if (_uploadResponse?.FormFields.Any() == true)
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">Form Fields</h5>
                        </div>
                        <div class="card-body">
                            @foreach (var field in _uploadResponse.FormFields)
                            {
                                <div class="mb-3">
                                    <label class="form-label">@field.Name</label>
                                    @if (field.Type == PdfFieldType.Text)
                                    {
                                        <input type="text" class="form-control" @bind="field.Value" />
                                    }
                                    else if (field.Type == PdfFieldType.Checkbox)
                                    {
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input" checked="@GetCheckboxValue(field)" @onchange="@((e) => SetCheckboxValue(field, (bool)e.Value!))" />
                                            <label class="form-check-label">@field.Name</label>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (_textElements.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">Text Elements</h5>
                        </div>
                        <div class="card-body">
                            @foreach (var textElement in _textElements)
                            {
                                <div class="mb-3 p-2 border rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <small class="text-muted">Text @(textElement.Id.Substring(0, 8))</small>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveTextElement(textElement.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                    <input type="text" class="form-control" @bind="textElement.Text" placeholder="Enter text..." />
                                    <div class="row mt-2">
                                        <div class="col-6">
                                            <input type="number" class="form-control" @bind="textElement.FontSize" min="8" max="72" />
                                        </div>
                                        <div class="col-6">
                                            <input type="color" class="form-control form-control-color" @bind="textElement.Color" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (_imageElements.Any())
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">Signatures</h5>
                        </div>
                        <div class="card-body">
                            @foreach (var imageElement in _imageElements)
                            {
                                <div class="mb-3 p-2 border rounded">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <small class="text-muted">Signature @(imageElement.Id.Substring(0, 8))</small>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveImageElement(imageElement.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                    <img src="data:image/png;base64,@imageElement.ImageData" class="img-thumbnail" style="max-width: 100px; max-height: 50px;" />
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Hidden file input for signature upload -->
<InputFile @ref="_signatureFileInput" id="signatureFileInput" OnChange="OnSignatureSelected" class="d-none" accept=".png,.jpg,.jpeg" />

@code {
    private PdfUploadResponse? _uploadResponse;
    private bool _pdfLoaded = false;
    private bool _isUploading = false;
    private bool _isProcessing = false;
    private string _errorMessage = string.Empty;
    private InputFile? _signatureFileInput;

    private List<PdfTextElement> _textElements = new();
    private List<PdfImageElement> _imageElements = new();

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        _isUploading = true;
        _errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            _uploadResponse = await PdfApiService.UploadPdfAsync(file);
            if (_uploadResponse != null)
            {
                _pdfLoaded = true;
                await LoadPdfViewer();
            }
            else
            {
                _errorMessage = "Failed to upload PDF. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error uploading PDF: {ex.Message}";
            Logger.LogError(ex, "Error uploading PDF");
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPdfViewer()
    {
        // For now, just show a placeholder. In a full implementation, 
        // we would integrate PDF.js here to render the PDF
        await JSRuntime.InvokeVoidAsync("console.log", "PDF loaded - integrate PDF.js here");
    }

    private void AddTextBox()
    {
        var textElement = new PdfTextElement
        {
            Id = Guid.NewGuid().ToString(),
            Text = "New Text",
            PageNumber = 1,
            FontSize = 12,
            Color = "#000000",
            Bounds = new PdfEdit.Shared.Models.Rectangle { X = 100, Y = 100, Width = 200, Height = 20 }
        };
        _textElements.Add(textElement);
        StateHasChanged();
    }

    private async Task UploadSignature()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('signatureFileInput').click()");
    }

    private async Task OnSignatureSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB limit
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var imageData = Convert.ToBase64String(ms.ToArray());

            var imageElement = new PdfImageElement
            {
                Id = Guid.NewGuid().ToString(),
                ImageData = imageData,
                PageNumber = 1,
                Bounds = new PdfEdit.Shared.Models.Rectangle { X = 100, Y = 200, Width = 100, Height = 50 }
            };
            _imageElements.Add(imageElement);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error uploading signature: {ex.Message}";
            Logger.LogError(ex, "Error uploading signature");
        }
    }

    private void RemoveTextElement(string id)
    {
        _textElements.RemoveAll(t => t.Id == id);
        StateHasChanged();
    }

    private void RemoveImageElement(string id)
    {
        _imageElements.RemoveAll(i => i.Id == id);
        StateHasChanged();
    }

    private bool GetCheckboxValue(PdfFormField field)
    {
        return !string.IsNullOrEmpty(field.Value) && field.Value.ToLower() != "false" && field.Value != "0";
    }

    private void SetCheckboxValue(PdfFormField field, bool value)
    {
        field.Value = value ? "true" : "false";
    }

    private async Task SaveAndDownload()
    {
        if (_uploadResponse == null) return;

        _isProcessing = true;
        _errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var request = new PdfEditRequest
            {
                DocumentId = _uploadResponse.Id,
                FormFields = _uploadResponse.FormFields,
                TextElements = _textElements,
                ImageElements = _imageElements
            };

            var response = await PdfApiService.ProcessPdfAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsByteArrayAsync();
                var fileName = $"edited-document-{DateTime.Now:yyyyMMdd-HHmmss}.pdf";
                
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(content));
            }
            else
            {
                _errorMessage = "Failed to process PDF. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error processing PDF: {ex.Message}";
            Logger.LogError(ex, "Error processing PDF");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
}
