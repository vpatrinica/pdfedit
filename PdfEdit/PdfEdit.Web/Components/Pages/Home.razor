@page "/"
@rendermode InteractiveServer
@using PdfEdit.Shared.Models
@using PdfEdit.Client.Services
@using Microsoft.JSInterop
@using System.Linq
@using System.Text.Json
@inject IPdfApiService PdfApiService
@inject IJSRuntime JSRuntime
@inject ILogger<Home> Logger

<PageTitle>PDF Editor</PageTitle>

<div class="container-fluid">
    @if (_uploadResponse == null)
    {
        <!-- Parse view (simplified) -->
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card"><div class="card-body">
                    <h5 class="card-title">Select PDF Document</h5>
                    <div class="mb-3"><InputFile OnChange="OnFileSelected" class="form-control" accept=".pdf" /></div>
                    @if (_isUploading) { <div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm me-2" role="status"></div><span>Parsing PDF...</span></div> }
                    @if (!string.IsNullOrEmpty(_uploadStatus)) { <div class="small text-muted">@_uploadStatus</div> }
                    @if (!string.IsNullOrEmpty(_errorMessage)) { <div class="alert alert-danger" role="alert">@_errorMessage</div> }
                </div></div>
            </div>
        </div>
    }
    else
    {
        <!-- Editing view directly after upload -->
        <div class="editor-toolbar d-flex flex-wrap align-items-center gap-2 mb-3 p-2 border rounded bg-light position-relative">
            <button class="btn btn-sm btn-outline-danger" @onclick="Reset" disabled="@_isProcessing"><i class="bi bi-file-earmark-plus"></i> Parse New</button>
            <h5 class="m-0 text-truncate" style="max-width:380px" title="@_uploadResponse?.FileName">@_uploadResponse?.FileName</h5>
            <button class="btn btn-sm btn-outline-info" @onclick="(()=> _showInfo = !_showInfo)"><i class="bi bi-info-circle"></i> Info</button>
            <div class="vr d-none d-md-inline mx-1" style="height:26px;"></div>
            <div class="btn-group me-1" role="group">
                <button class="btn btn-sm btn-outline-primary" @onclick="PrevPage" disabled="@(_currentPage<=1)"><i class="bi bi-chevron-left"></i></button>
                <span class="btn btn-sm btn-light disabled">Pg @_currentPage / @_uploadResponse?.PageCount</span>
                <button class="btn btn-sm btn-outline-primary" @onclick="NextPage" disabled="@(_uploadResponse==null || _currentPage>=_uploadResponse.PageCount)"><i class="bi bi-chevron-right"></i></button>
            </div>
            <span class="small text-muted">Size: @Math.Round(_pageWidthPoints) x @Math.Round(_pageHeightPoints) pts</span>
            <div class="ms-auto d-flex align-items-center gap-2">
                <button class="btn btn-sm btn-outline-primary" @onclick="AddTextBox" disabled="@_isProcessing"><i class="bi bi-type"></i> Text</button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="UploadSignature" disabled="@_isProcessing"><i class="bi bi-file-image"></i> Signature</button>
                <button class="btn btn-sm btn-success" @onclick="SaveAndDownload" disabled="@_isProcessing">
                    @if (_isProcessing) { <span class="spinner-border spinner-border-sm me-1" role="status"></span> }
                    <i class="bi bi-download"></i> Save
                </button>
            </div>
            @if (_showInfo && _uploadResponse != null)
            {
                <div class="doc-info-pop card shadow-sm position-absolute" style="top:100%; left:0; margin-top:.5rem; z-index:200; width:320px;">
                    <div class="card-header py-1 d-flex justify-content-between align-items-center">
                        <span class="fw-semibold small">Document Info</span>
                        <button type="button" class="btn-close btn-sm" style="font-size:.65rem;" @onclick="(()=> _showInfo=false)"></button>
                    </div>
                    <div class="card-body small py-2" style="max-height:220px; overflow:auto;">
                        <dl class="row mb-0">
                            <dt class="col-4">Session</dt><dd class="col-8 text-break">@_uploadResponse.Id</dd>
                            <dt class="col-4">File</dt><dd class="col-8 text-break" title="@_uploadResponse.FileName">@_uploadResponse.FileName</dd>
                            <dt class="col-4">Pages</dt><dd class="col-8">@_uploadResponse.PageCount</dd>
                            <dt class="col-4">Fields</dt><dd class="col-8">@_uploadResponse.FormFields.Count</dd>
                        </dl>
                    </div>
                </div>
            }
        </div>
        <div class="row g-3">
            <div class="col-lg-9">
                <div id="pdfPreviewViewer" style="height:750px;overflow:auto;border:1px solid #ccc;position:relative;">
                    <canvas id="pdfPreviewCanvas" style="width:100%;display:block;"></canvas>
                    <div id="clickLayer" style="position:absolute;inset:0;cursor:crosshair;background:transparent;"></div>
                    @if (_isPreviewing)
                    {
                        <div class="position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center" style="background:rgba(255,255,255,.6);"><div class="spinner-border" role="status"></div></div>
                    }
                </div>
            </div>
            <div class="col-lg-3">
                <div class="mb-3">
                    <h6 class="mb-2 d-flex align-items-center justify-content-between">
                        <span class="d-flex align-items-center gap-1"><button class="btn btn-xs btn-toggle" @onclick="(()=> _collapseFields = !_collapseFields)"><i class="bi @( _collapseFields?"bi-caret-right-fill":"bi-caret-down-fill")" style="font-size:.9rem;"></i></button>Form Fields (Pg @_currentPage)</span>
                        <div class="d-flex flex-wrap gap-1">
                            <button class="btn btn-xs @( _fieldFilter==FieldFilter.All?"btn-primary":"btn-outline-secondary")" @onclick="() => _fieldFilter = FieldFilter.All">All</button>
                            <button class="btn btn-xs @( _fieldFilter==FieldFilter.TextOnly?"btn-primary":"btn-outline-secondary")" @onclick="() => _fieldFilter = FieldFilter.TextOnly">Text</button>
                            <button class="btn btn-xs @( _fieldFilter==FieldFilter.Checkboxes?"btn-primary":"btn-outline-secondary")" @onclick="() => _fieldFilter = FieldFilter.Checkboxes">Checkbox</button>
                        </div>
                    </h6>
                    @if(!_collapseFields)
                    {
                        <input class="form-control form-control-sm mb-2" placeholder="Filter name/group" @bind="_fieldNameFilter" />
                        <div style="max-height:250px; overflow:auto;">
                            @if (_uploadResponse?.FormFields.Any(f=>f.PageNumber==_currentPage) == true)
                            {
                                @foreach (var f in FilteredFields())
                                {
                                    <div class="mb-2 field-item @(f.Name==_activeFieldName?"selected":"")" @onclick="() => SelectFormField(f)">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <label class="form-label small mb-1 text-truncate" style="max-width:140px" title="@f.Name">@f.Name (@f.Type)</label>
                                            <button class="btn btn-sm btn-outline-secondary p-0 px-1" title="Locate" style="line-height:1;" @onclick:stopPropagation @onclick="(()=>ShowTarget(f))">+</button>
                                        </div>
                                        @if (f.Type == PdfFieldType.Text)
                                        { <input class="form-control form-control-sm" @bind="f.Value" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /> }
                                        else if (f.Type == PdfFieldType.Checkbox)
                                        { <div class="form-check form-switch"><input type="checkbox" class="form-check-input" checked="@GetCheckboxValue(f)" @onchange="@(e=> OnCheckboxChanged(f,e))" /></div> }
                                    </div>
                                }
                            }
                        </div>
                    }
                </div>
                <div class="mb-3">
                    <h6 class="d-flex justify-content-between align-items-center mb-2">
                        <span class="d-flex align-items-center gap-1"><button class="btn btn-xs btn-toggle" @onclick="(()=> _collapseTexts = !_collapseTexts)"><i class="bi @( _collapseTexts?"bi-caret-right-fill":"bi-caret-down-fill")" style="font-size:.9rem;"></i></button>Text Elements (Pg @_currentPage)</span>
                        <button class="btn btn-sm btn-outline-primary" @onclick="AddTextBox">Add</button>
                    </h6>
                    @if(!_collapseTexts)
                    {
                        <div style="max-height:250px; overflow:auto;">
                            @foreach (var textElement in _textElements.Where(t=>t.PageNumber==_currentPage))
                            {
                                var selected = textElement.Id == _activeTextId;
                                <div class="mb-2 p-2 border rounded small @(selected?"panel-selected":"")" @onclick="(()=>SelectTextElement(textElement))">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span class="text-muted">TXT @textElement.Id.Substring(0,6)</span>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-secondary" title="Locate" @onclick:stopPropagation @onclick="(()=>ShowTarget(textElement))">+</button>
                                            <button class="btn btn-outline-danger" title="Delete" @onclick:stopPropagation @onclick="(()=> RemoveTextElement(textElement.Id))"><i class="bi bi-trash"></i></button>
                                        </div>
                                    </div>
                                    <input class="form-control form-control-sm mb-1" @bind="textElement.Text" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" />
                                    <div class="row g-1 mb-1">
                                        <div class="col-4"><input class="form-control form-control-sm" type="number" min="6" max="96" @bind="textElement.FontSize" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /></div>
                                        <div class="col-4"><input class="form-control form-control-sm" type="number" min="5" @bind="textElement.Bounds.Width" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /></div>
                                        <div class="col-4"><input class="form-control form-control-sm" type="number" min="5" @bind="textElement.Bounds.Height" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" /></div>
                                    </div>
                                    <div class="row g-1 mb-1">
                                        <div class="col-6"><input placeholder="X" class="form-control form-control-sm" type="number" min="0" max="@_pageWidthPoints" @bind="textElement.Bounds.X" @bind:after="(()=>{UpdateTextPosition(textElement,nameof(textElement.Bounds.X),textElement.Bounds.X); QueuePreviewUpdate();})" /></div>
                                        <div class="col-6"><input placeholder="Y" class="form-control form-control-sm" type="number" min="0" max="@_pageHeightPoints" @bind="textElement.Bounds.Y" @bind:after="(()=>{UpdateTextPosition(textElement,nameof(textElement.Bounds.Y),textElement.Bounds.Y); QueuePreviewUpdate();})" /></div>
                                    </div>
                                    <div class="row g-1 mb-1">
                                        <div class="col-7">
                                            <select class="form-select form-select-sm" @bind="textElement.FontFamily" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})">
                                                @foreach (var f in _availableFonts)
                                                {
                                                    <option value="@f">@f</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="col-5">
                                            <input type="color" class="form-control form-control-color form-control-sm" style="padding:0;" @bind="textElement.Color" @bind:after="(()=>{SaveSession(); QueuePreviewUpdate();})" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="mb-3">
                    <h6 class="d-flex justify-content-between align-items-center mb-2">
                        <span class="d-flex align-items-center gap-1"><button class="btn btn-xs btn-toggle" @onclick="(()=> _collapseImages = !_collapseImages)"><i class="bi @( _collapseImages?"bi-caret-right-fill":"bi-caret-down-fill")" style="font-size:.9rem;"></i></button>Signatures (Pg @_currentPage)</span>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="UploadSignature">Add</button>
                    </h6>
                    @if(!_collapseImages)
                    {
                        <div style="max-height:250px; overflow:auto;">
                            @foreach (var imageElement in _imageElements.Where(i=>i.PageNumber==_currentPage))
                            {
                                var selected = imageElement.Id == _activeImageId;
                                <div class="mb-2 p-2 border rounded small @(selected?"panel-selected":"")" @onclick="(()=>SelectImageElement(imageElement))">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <span class="text-muted">SIG @imageElement.Id.Substring(0,6)</span>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-secondary" title="Locate" @onclick:stopPropagation @onclick="(()=>ShowTarget(imageElement))">+</button>
                                            <button class="btn btn-outline-danger" title="Delete" @onclick:stopPropagation @onclick="(()=> RemoveImageElement(imageElement.Id))"><i class="bi bi-trash"></i></button>
                                        </div>
                                    </div>
                                    <div class="row g-1 mb-1">
                                        <div class="col-6"><label class="form-label small">X</label><input type="number" class="form-control form-control-sm" min="0" max="@_pageWidthPoints" @bind="imageElement.Bounds.X" @bind:after="(()=>{UpdateImagePosition(imageElement,nameof(imageElement.Bounds.X),imageElement.Bounds.X); QueuePreviewUpdate();})" /></div>
                                        <div class="col-6"><label class="form-label small">Y</label><input type="number" class="form-control form-control-sm" min="0" max="@_pageHeightPoints" @bind="imageElement.Bounds.Y" @bind:after="(()=>{UpdateImagePosition(imageElement,nameof(imageElement.Bounds.Y),imageElement.Bounds.Y); QueuePreviewUpdate();})" /></div>
                                    </div>
                                    <div class="mb-1">
                                        <label class="form-label small">Height (pts)</label>
                                        <input class="form-control form-control-sm" type="number" min="5" value="@Math.Round(imageElement.Bounds.Height)" @onchange="(e=>{OnImageHeightChanged(imageElement,e); QueuePreviewUpdate();})" />
                                        <div class="small text-muted">W:@Math.Round(imageElement.Bounds.Width) H:@Math.Round(imageElement.Bounds.Height)</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(_errorMessage)) { <div class="alert alert-danger mt-3 mb-0">@_errorMessage</div> }
    }
</div>

<InputFile @ref="_signatureFileInput" id="signatureFileInput" OnChange="OnSignatureSelected" class="d-none" accept=".png,.jpg,.jpeg" />

<script>
window.pdfEditRegisterClickLayer = function(dotNetRef, pageWidthPts, pageHeightPts){
  const layer = document.getElementById('clickLayer');
  if(!layer) return;
  if(layer._pdfEditBound) return; // bind once
  layer._pdfEditBound = true;
  layer.addEventListener('dblclick', ev => {
     const rect = layer.getBoundingClientRect();
     const xPx = ev.clientX - rect.left; const yPx = ev.clientY - rect.top;
     const xPdf = xPx * (pageWidthPts / rect.width);
     const yPdf = pageHeightPts - yPx * (pageHeightPts / rect.height); // PDF origin bottom-left
     const ix = Math.round(xPdf); const iy = Math.round(yPdf);
     if(confirm(`Move selected element to X:${ix} Y:${iy}?`)){
        dotNetRef.invokeMethodAsync('MoveActiveElement', xPdf, yPdf)
         .then(()=>console.log('Move invoked', ix, iy))
         .catch(e=>console.error('Move error', e));
     }
  });
};
</script>

@code {
    // ---- State / Models ----
    private record PaperSize(string Name,double Width,double Height); // retained (not exposed)
    private double _pageWidthPoints = 595;
    private double _pageHeightPoints = 842;

    private PdfUploadResponse? _uploadResponse;
    private bool _pdfLoaded; private bool _isUploading; private bool _isProcessing; private bool _isPreviewing;
    private string _errorMessage = string.Empty; private string _uploadStatus = string.Empty; private string? _originalPdfBase64;
    private InputFile? _signatureFileInput;

    public class RichTextElement : PdfTextElement {}
    public class SignatureImageElement : PdfImageElement { public double BaseWidth { get; set; } public double BaseHeight { get; set; } }

    private readonly List<RichTextElement> _textElements = new();
    private readonly List<SignatureImageElement> _imageElements = new();
    private readonly string[] _availableFonts = new[]{ "Arial", "Times New Roman", "Courier New" }; // limited to standard 14 mapped fonts
    private int _currentPage = 1; private string? _activeFieldName; private string? _activeTextId; private string? _activeImageId; private CancellationTokenSource? _previewCts;

    private enum FieldFilter { All, TextOnly, Checkboxes }
    private FieldFilter _fieldFilter = FieldFilter.All; private string _fieldNameFilter = string.Empty;

    private DotNetObjectReference<Home>? _dotNetRef;

    private bool _hasDynamicPageSizes => _uploadResponse?.PageDimensions?.Any(d=>d.Width>0 && d.Height>0) == true;

    private static string BaseName(string name) => name.Contains('#') ? name.Split('#')[0] : name;
    private static double Clamp(double v,double min,double max)=> v<min?min:(v>max?max:v);

    private void UpdateCurrentPageSize()
    {
        if (_hasDynamicPageSizes && _uploadResponse != null)
        {
            var dim = _uploadResponse.PageDimensions.FirstOrDefault(d=>d.PageNumber==_currentPage);
            if (dim != null && dim.Width > 0 && dim.Height > 0)
            {
                _pageWidthPoints = dim.Width;
                _pageHeightPoints = dim.Height;
                foreach(var t in _textElements.Where(t=>t.PageNumber==_currentPage))
                { t.Bounds.X = Clamp(t.Bounds.X,0,_pageWidthPoints - Math.Max(5,t.Bounds.Width)); t.Bounds.Y = Clamp(t.Bounds.Y,0,_pageHeightPoints - Math.Max(5,t.Bounds.Height)); }
                foreach(var i in _imageElements.Where(i=>i.PageNumber==_currentPage))
                { i.Bounds.X = Clamp(i.Bounds.X,0,_pageWidthPoints - Math.Max(5,i.Bounds.Width)); i.Bounds.Y = Clamp(i.Bounds.Y,0,_pageHeightPoints - Math.Max(5,i.Bounds.Height)); }
            }
        }
    }

    [JSInvokable]
    public Task MoveActiveElement(double xPdf, double yPdf)
    {
        var newX = (int)Math.Round(xPdf); var newY = (int)Math.Round(yPdf);
        if (_activeTextId == null && _activeImageId == null)
        {
            var lastText = _textElements.LastOrDefault(t=>t.PageNumber==_currentPage);
            if (lastText != null) _activeTextId = lastText.Id; else { var lastImg = _imageElements.LastOrDefault(i=>i.PageNumber==_currentPage); if (lastImg != null) _activeImageId = lastImg.Id; }
        }
        if (_activeTextId != null)
        {
            var t = _textElements.FirstOrDefault(x=>x.Id==_activeTextId);
            if (t != null) { t.Bounds.X = Clamp(newX,0,_pageWidthPoints - t.Bounds.Width); t.Bounds.Y = Clamp(newY,0,_pageHeightPoints - t.Bounds.Height); }
        }
        else if (_activeImageId != null)
        {
            var img = _imageElements.FirstOrDefault(x=>x.Id==_activeImageId);
            if (img != null) { img.Bounds.X = Clamp(newX,0,_pageWidthPoints - img.Bounds.Width); img.Bounds.Y = Clamp(newY,0,_pageHeightPoints - img.Bounds.Height); }
        }
        SaveSession(); QueuePreviewUpdate(); InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) _dotNetRef = DotNetObjectReference.Create(this);
        if (_pdfLoaded && _dotNetRef != null)
        {
            try { await JSRuntime.InvokeVoidAsync("pdfEditRegisterClickLayer", _dotNetRef, _pageWidthPoints, _pageHeightPoints); } catch { }
        }
    }
    public void Dispose() => _dotNetRef?.Dispose();

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File; if (file == null) return;
        _isUploading = true; _uploadStatus = "Parsing..."; _errorMessage = string.Empty; StateHasChanged();
        try
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream(50 * 1024 * 1024).CopyToAsync(ms);
            _originalPdfBase64 = Convert.ToBase64String(ms.ToArray());
            PdfUploadResponse? serverResp = null; try { serverResp = await PdfApiService.ParsePdfAsync(file); } catch (Exception exMeta) { Logger.LogWarning(exMeta, "Server metadata failed"); }
            if (serverResp != null) { _uploadResponse = serverResp; _uploadStatus = "Server metadata parsed"; }
            else { _uploadResponse = new PdfUploadResponse { Id = Guid.NewGuid().ToString(), FileName = file.Name, PageCount = 1 }; _uploadStatus = "Parsed locally"; }
            _currentPage = 1; _pdfLoaded = true; UpdateCurrentPageSize();
            await JSRuntime.InvokeVoidAsync("savePdfToIndexedDb", _uploadResponse.Id, _originalPdfBase64);
            await JSRuntime.InvokeVoidAsync("setLastSessionId", _uploadResponse.Id);
            SaveSession(); QueuePreviewUpdate();
        }
        catch (Exception ex) { _errorMessage = $"Parse error: {ex.Message}"; Logger.LogError(ex, "OnFileSelected"); }
        finally { _isUploading = false; StateHasChanged(); }
    }

    private void Reset(){ if (_uploadResponse != null) JSRuntime.InvokeVoidAsync("clearMetadata", _uploadResponse.Id); _uploadResponse=null; _pdfLoaded=false; _textElements.Clear(); _imageElements.Clear(); _errorMessage=""; _uploadStatus=""; _originalPdfBase64=null; }

    private void AddTextBox(){ var t=new RichTextElement{ Id=Guid.NewGuid().ToString(), Text="New Text", PageNumber=_currentPage, FontSize=14, Color="#000000", FontFamily="Arial", Bounds=new Rectangle{ X=50, Y=_pageHeightPoints-70, Width=200, Height=20 } }; _textElements.Add(t); SaveSession(); QueuePreviewUpdate(); }
    private async Task UploadSignature(){ await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('signatureFileInput').click()"); }
    private async Task OnSignatureSelected(InputFileChangeEventArgs e){ var file=e.File; if(file==null)return; try { using var s=file.OpenReadStream(5*1024*1024); using var ms=new MemoryStream(); await s.CopyToAsync(ms); var data=Convert.ToBase64String(ms.ToArray()); var img=new SignatureImageElement{ Id=Guid.NewGuid().ToString(), ImageData=data, PageNumber=_currentPage, Bounds=new Rectangle{ X=50, Y=_pageHeightPoints-150, Width=100, Height=50 }, BaseWidth=100, BaseHeight=50 }; _imageElements.Add(img); SaveSession(); QueuePreviewUpdate(); } catch(Exception ex){ _errorMessage=$"Signature error: {ex.Message}"; }}
    private void OnImageHeightChanged(SignatureImageElement img, ChangeEventArgs e){ if(double.TryParse(e.Value?.ToString(), out var h)){ var aspect=(img.BaseWidth>0 && img.BaseHeight>0)? img.BaseWidth/img.BaseHeight : (img.Bounds.Width/img.Bounds.Height); h=Math.Max(5,h); var w=Math.Max(5,h*aspect); img.Bounds.Height=h; img.Bounds.Width=w; img.Bounds.X=Clamp(img.Bounds.X,0,_pageWidthPoints-img.Bounds.Width); img.Bounds.Y=Clamp(img.Bounds.Y,0,_pageHeightPoints-img.Bounds.Height); SaveSession(); QueuePreviewUpdate(); } }
    private void RemoveTextElement(string id){ _textElements.RemoveAll(t=>t.Id==id); SaveSession(); QueuePreviewUpdate(); }
    private void RemoveImageElement(string id){ _imageElements.RemoveAll(i=>i.Id==id); SaveSession(); QueuePreviewUpdate(); }

    private async Task SaveAndDownload(){ if(_uploadResponse==null||string.IsNullOrEmpty(_originalPdfBase64)) return; _isProcessing=true; try{ var req=new PdfEditRequest{ OriginalPdfBase64=_originalPdfBase64, FormFields=_uploadResponse.FormFields, TextElements=_textElements.Cast<PdfTextElement>().ToList(), ImageElements=_imageElements.Cast<PdfImageElement>().ToList() }; var resp=await PdfApiService.ProcessPdfAsync(req); if(resp.IsSuccessStatusCode){ var bytes=await resp.Content.ReadAsByteArrayAsync(); await JSRuntime.InvokeVoidAsync("downloadFile", $"edited-{DateTime.Now:yyyyMMdd-HHmmss}.pdf", Convert.ToBase64String(bytes)); } else _errorMessage=$"Process failed: {(int)resp.StatusCode} {resp.ReasonPhrase}"; } catch(Exception ex){ _errorMessage=$"Process error: {ex.Message}"; } finally{ _isProcessing=false; } }

    private void SaveSession(){ if(_uploadResponse==null) return; try{ var wrapper=new { upload=_uploadResponse, texts=_textElements, images=_imageElements }; JSRuntime.InvokeVoidAsync("saveMetadata", _uploadResponse.Id, JsonSerializer.Serialize(wrapper)); } catch { } }

    private void QueuePreviewUpdate(){ if(!_pdfLoaded||_uploadResponse==null||string.IsNullOrEmpty(_originalPdfBase64)) return; _previewCts?.Cancel(); var cts=new CancellationTokenSource(); _previewCts=cts; _=Task.Run(async()=>{ try{ await Task.Delay(300,cts.Token); await InvokeAsync(UpdatePreviewAsync);} catch{} }); }

    private async Task UpdatePreviewAsync(){ if(_uploadResponse==null||string.IsNullOrEmpty(_originalPdfBase64)) return; _isPreviewing=true; try{ var req=new PdfEditRequest{ OriginalPdfBase64=_originalPdfBase64, FormFields=_uploadResponse.FormFields, TextElements=_textElements.Cast<PdfTextElement>().ToList(), ImageElements=_imageElements.Cast<PdfImageElement>().ToList() }; var resp=await PdfApiService.ProcessPdfAsync(req); if(resp.IsSuccessStatusCode){ var bytes=await resp.Content.ReadAsByteArrayAsync(); var b64=Convert.ToBase64String(bytes); await JSRuntime.InvokeVoidAsync("renderPdfPage", b64, "pdfPreviewCanvas", _currentPage, 1.0); } else _errorMessage=$"Preview failed: {(int)resp.StatusCode}"; } catch(Exception ex){ _errorMessage=$"Preview error: {ex.Message}"; } finally{ _isPreviewing=false; StateHasChanged(); } }

    private void PrevPage(){ if(_currentPage>1){ _currentPage--; UpdateCurrentPageSize(); QueuePreviewUpdate(); } }
    private void NextPage(){ if(_uploadResponse!=null && _currentPage<_uploadResponse.PageCount){ _currentPage++; UpdateCurrentPageSize(); QueuePreviewUpdate(); } }

    private void SelectFormField(PdfFormField f){ _activeFieldName=f.Name; if(f.PageNumber!=_currentPage){ _currentPage=f.PageNumber; UpdateCurrentPageSize(); QueuePreviewUpdate(); } }
    private void SelectTextElement(RichTextElement t){ _activeTextId=t.Id; _activeImageId=null; _activeFieldName=null; }
    private void SelectImageElement(SignatureImageElement i){ _activeImageId=i.Id; _activeTextId=null; _activeFieldName=null; }

    private async Task ShowTarget(RichTextElement t)=> await ShowTargetAt(t.Bounds.X + t.Bounds.Width/2.0, t.Bounds.Y + t.Bounds.Height/2.0);
    private async Task ShowTarget(SignatureImageElement img)=> await ShowTargetAt(img.Bounds.X + img.Bounds.Width/2.0, img.Bounds.Y + img.Bounds.Height/2.0);
    private async Task ShowTarget(PdfFormField f)=> await ShowTargetAt(f.Bounds.X + f.Bounds.Width/2.0, f.Bounds.Y + f.Bounds.Height/2.0);
    private async Task ShowTargetAt(double x,double y){ try{ await JSRuntime.InvokeVoidAsync("showPdfTarget","pdfPreviewCanvas",x,y);}catch{} }

    private void UpdateImagePosition(SignatureImageElement i,string which,object? val){ if(double.TryParse(val?.ToString(), out var num)){ if(which.EndsWith("X")) i.Bounds.X=Clamp(num,0,_pageWidthPoints - Math.Max(5,i.Bounds.Width)); else i.Bounds.Y=Clamp(num,0,_pageHeightPoints - Math.Max(5,i.Bounds.Height)); SaveSession(); QueuePreviewUpdate(); } }
    private void UpdateTextPosition(RichTextElement t,string which,object? val){ if(double.TryParse(val?.ToString(), out var num)){ if(which.EndsWith("X")) t.Bounds.X=Clamp(num,0,_pageWidthPoints - Math.Max(5,t.Bounds.Width)); else t.Bounds.Y=Clamp(num,0,_pageHeightPoints - Math.Max(5,t.Bounds.Height)); SaveSession(); QueuePreviewUpdate(); } }

    private void OnCheckboxChanged(PdfFormField field, ChangeEventArgs e){ var newVal = e.Value is bool b ? b : (bool.TryParse(e.Value?.ToString(), out var px) && px); if(newVal && field.Name.Contains('#') && _uploadResponse!=null){ var baseName=BaseName(field.Name); foreach(var f in _uploadResponse.FormFields.Where(ff=>ff!=field && BaseName(ff.Name)==baseName)) f.Value="false"; } field.Value=newVal?"true":"false"; SaveSession(); QueuePreviewUpdate(); }

    private bool GetCheckboxValue(PdfFormField field)=> !string.IsNullOrEmpty(field.Value) && field.Value.ToLower()!="false" && field.Value!="0";
    private IEnumerable<PdfFormField> FilteredFields() => _uploadResponse!.FormFields
        .Where(f=>f.PageNumber==_currentPage)
        .Where(f=> _fieldFilter==FieldFilter.All || (_fieldFilter==FieldFilter.TextOnly && f.Type==PdfFieldType.Text) || (_fieldFilter==FieldFilter.Checkboxes && f.Type==PdfFieldType.Checkbox))
        .Where(f=> string.IsNullOrWhiteSpace(_fieldNameFilter) || f.Name.Contains(_fieldNameFilter, StringComparison.OrdinalIgnoreCase) || BaseName(f.Name).Contains(_fieldNameFilter, StringComparison.OrdinalIgnoreCase));
    private bool _showInfo = false; // collapsed by default
    private bool _collapseFields = false; // keep fields expanded by default? false means open
    private bool _collapseTexts = false;
    private bool _collapseImages = false;

    private string ThumbBoxStyle(Rectangle r)
    {
        var w = _pageWidthPoints <= 0 ? 1 : _pageWidthPoints;
        var h = _pageHeightPoints <= 0 ? 1 : _pageHeightPoints;
        double left = r.X / w * 100.0;
        double top = (1 - (r.Y + r.Height) / h) * 100.0;
        double width = (r.Width / w) * 100.0;
        double height = (r.Height / h) * 100.0;
        if (width < 1) width = 1; if (height < 1) height = 1;
        return $"left:{left:F2}%;top:{top:F2}%;width:{width:F2}%;height:{height:F2}%;";
    }
}

<style>
    .panel-selected { border-color:#ff5722 !important; box-shadow:0 0 4px rgba(255,87,34,.6); }
    .field-item.selected { border:1px solid #ff5722; background:rgba(255,87,34,.05); }
    .editor-toolbar { position:sticky; top:0; z-index:50; background:#f8f9fa; }
    .doc-info-pop { animation: fadeIn .12s ease-in; }
    @@keyframes fadeIn { from { opacity:0; transform:translateY(-4px);} to { opacity:1; transform:translateY(0);} }
    .btn-xs{ padding:.15rem .35rem; font-size:.65rem; line-height:1; }
    .btn-toggle{ border:0; background:transparent; padding:0; }
</style>
